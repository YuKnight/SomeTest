
https://blog.csdn.net/u010889616/article/category/7224598
https://blog.csdn.net/u013107656/article/category/6257625



--WebView远程代码执行
Landroid/webkit/WebView;->addJavascriptInterface(Ljava/lang/Object;Ljava/lang/String;)V





--设备信息手机号操作行为
Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;



--获取地理位置行为
Landroid/telephony/TelephonyManager;->getCellLocation()Landroid/telephony/CellLocation;
Landroid/telephony/gsm/GsmCellLocation;->getLac()I
Landroid/telephony/TelephonyManager;->getNeighboringCellInfo()Ljava/util/List;
Landroid/telephony/NeighboringCellInfo;->getCid()I



--WebView无HTTPS校验风险
// 在 com.alipay.sdk.auth.AuthActivity$b 内部类的 public final onReceivedSslError(Landroid/webkit/WebView;Landroid/webkit/SslErrorHandler;Landroid/net/http/SslError;)V 方法，错误的使用函数 Landroid/webkit/SslErrorHandler;->proceed()V
Landroid/webkit/SslErrorHandler;->proceed()V




--WebView密码明文保存
Landroid/webkit/WebView;-><init>(Landroid/content/Context;)V
Landroid/webkit/WebView;-><init>(Landroid/content/Context;Landroid/util/AttributeSet;)V
Landroid/webkit/WebView;-><init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V

--服务器端Banner泄漏
// 主机：a.apicloud.com Banner：nginx
// 主机：seeu-club.com Banner：Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/5.6.9


--客户端证书校验
// 在 com.uzmap.pkg.uzmodules.uzWx.utils.Util$SSLSocketFactoryEx$1 内部类的 public checkClientTrusted([Ljava/security/cert/X509Certificate;Ljava/lang/String;)V 方法



--联系人操作行为
Landroid/content/ContentResolver;->query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;




--数据库创建模式检测
// 在 com.baidu.location.a.f 类的 public b()V 方法，使用了函数 Landroid/database/sqlite/SQLiteDatabase;->openOrCreateDatabase(Ljava/io/File;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase; 0x1
// Landroid/database/sqlite/SQLiteDatabase;->openOrCreateDatabase(Ljava/io/File;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase; 0x1


// https://blog.csdn.net/u010889616/article/details/80962441
// 检测调用ContextWrapper类的openOrCreateDatabase方法和Context类的openOrCreateDatabase方法地方，检查第二个参数Mode，判断是否是 MODE_WORLD_READABLE(1) 或者 MODE_WORLD_WRITEABLE(2)，如果是这两个权限，则认为该应用数据存在被第三方应用读取和篡改风险。
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.DatabaseErrorHandler;

android/content/Context;
public abstract SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory);

Landroid/content/Context;->openOrCreateDatabase(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;

android/content/ContextWrapper;
public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory)
public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory, DatabaseErrorHandler errorHandler)
Landroid/content/ContextWrapper;->openOrCreateDatabase(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;
Landroid/content/ContextWrapper;->openOrCreateDatabase(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;




--升级包数据篡改风险
// 在 com.baidu.vi.VDeviceAPI 类的 public static setupSoftware(Ljava/lang/String;)V 方法，疑似存在升级包数据篡改安全风险！




--Webview隐藏接口风险








--Activity配置安全
// 在 AndroidManifest.xml 文件中 Activity (jp.co.vcube.android.gate.ui.activity.LandingActivity) 没有被保护，使用[intent-filter]属性
// 在 AndroidManifest.xml 文件中 Activity (hf.iOffice.module.login.MiPushActivity) 没有被保护，使用[android:exported=true]属性


--BroadcastReceiver配置安全
// 在 AndroidManifest.xml 文件中 Broadcast Receiver (com.taobao.accs.EventReceiver) 没有被保护，使用[intent-filter]属性
// 在 AndroidManifest.xml 文件中 Broadcast Receiver (com.taobao.agoo.AgooCommondReceiver) 没有被保护，使用[android:exported=true]属性


--Service配置安全
// 在 AndroidManifest.xml 文件中 Service (cn.wps.moffice.demo.agent.AgentMessageService) 没有被保护，使用[intent-filter]属性
// 在 AndroidManifest.xml 文件中 Service (com.umeng.message.XiaomiIntentService) 没有被保护，使用[android:exported=true]属性


--ContentProvider访问路径配置安全    provider节点中通过android:pathPrefix、android:path或android:pathPatten进行最小化访问路径申明和最小权限申明




--动态注册Receiver风险
// ->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;
Landroid/content/Context;->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;
Lcom/vcube/mobile/vrms5/ConferenceActivity;->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;


--存储卡的操作行为
Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;



--PendingIntent错误使用Intent风险
Landroid/app/PendingIntent;->getService(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;
Landroid/app/PendingIntent;->getActivity(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;
Landroid/app/PendingIntent;->getBroadcast(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;


--Intent Scheme URL攻击漏洞
Landroid/net/Uri;->parse(Ljava/lang/String;)Landroid/net/Uri;




--服务端证书校验




--getDir数据全局可读写漏洞
// Landroid/content/Context;->getDir(Ljava/lang/String;I)Ljava/io/File; 存在风险的模式 0x2 


--敏感函数调用
Landroid/telephony/TelephonyManager;->getSubscriberId()Ljava/lang/String;
Landroid/telephony/TelephonyManager;->getSimOperator()Ljava/lang/String;
Landroid/telephony/TelephonyManager;->getNetworkOperator()Ljava/lang/String;
Landroid/telephony/TelephonyManager;->listen(Landroid/telephony/PhoneStateListener;I)V
Landroid/telephony/TelephonyManager;->getSimOperatorName()Ljava/lang/String;
Landroid/telephony/TelephonyManager;->getPhoneType()I
Landroid/app/ActivityManager;->getRunningAppProcesses()Ljava/util/List;
Landroid/app/ActivityManager;->getRunningTasks(I)Ljava/util/List;
Landroid/content/pm/PackageManager;->getInstalledPackages(I)Ljava/util/List;


--动态加载DEX文件检测
Ldalvik/system/PathClassLoader;-><init>(Ljava/lang/String;Ljava/lang/ClassLoader;)V
Ldalvik/system/DexClassLoader;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)V
Ldalvik/system/PathClassLoader;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)V


--控制力安全
// 高危权限： android.permission.READ_PHONE_STATE,读取电话状态
// 控制力得分： 70.40



--通信套接字安全
Ljava/net/InetSocketAddress;-><init>(Ljava/lang/String;I)V
Ljava/net/Proxy;-><init>(Ljava/net/Proxy$Type;Ljava/net/SocketAddress;)V



--明文证书检测
./assets/server.crt







--主机名弱校验风险
// 利用HostnameVerifier子类中的verify函数，校验服务器主机名的合法性。
// 在 io.dcloud.sonic.SonicSessionConnection$SessionConnectionDefaultImpl$4 内部类的 public verify(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z 方法
->verify(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z



--隐藏启动误判风险
进行语义分析，利用对象属性值结合上下文，依据相关特征，智能识别不安全配置，发现存在隐藏启动代码的可能，表现为未发现有入口界面。















--推送SDK检测
cn.jpush.android.api.JPushInterface  void init(Context context)
极光推送: JPushInterface.init(this);     Lcn/jpush/android/api/JPushInterface;->init(Landroid/content/Context;)V
MobPush: MobSDK.init(Activity.this);


--广告SDK检测
有米广告SDK: 
广点通广告SDK:
Lcom/qq/gdt/action/GDTAction;->init(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V


--支付SDK检测
TrPay支付SDK（图灵支付）: 
TrPay.getInstance(Activity.this).initPaySdk("您的应用AppKey","baidu");
Lcom/base/bj/paysdk/utils/TrPay;->initPaySdk(Ljava/lang/String;Ljava/lang/String;)V

Ping++ 聚合支付系统
Pingpp.createPayment(YourActivity.this, data);

微信支付:
Lcom/tencent/mm/sdk/openapi/WXAPIFactory;->createWXAPI(Landroid/content/Context;Ljava/lang/String;Z)Lcom/tencent/mm/sdk/openapi/IWXAPI;

支付宝支付:
Lcom/alipay/sdk/app/AuthTask;->authV2(Ljava/lang/String;Z)Ljava/util/Map;
Lcom/alipay/sdk/app/PayTask;->payV2(Ljava/lang/String;Z)Ljava/util/Map;

<<<<<<< HEAD
=======


--统计SDK
友盟统计:
/**
* 注意: 即使您已经在AndroidManifest.xml中配置过appkey和channel值，也需要在App代码中调
* 用初始化接口（如需要使用AndroidManifest.xml中配置好的appkey和channel值，
* UMConfigure.init调用中appkey和channel参数请置为null）。
*/
UMConfigure.init(Context context, String appkey, String channel, int deviceType, String pushSecret);
Lcom/umeng/commonsdk/UMConfigure;->init(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V


/** 
* 注意：如果您已经在AndroidManifest.xml中配置过appkey和channel值，可以调用此版本初始化函数。
*/
UMConfigure.init(Context context, int deviceType, String pushSecret);
Lcom/umeng/commonsdk/UMConfigure;->init(Landroid/content/Context;ILjava/lang/String;)V






--明文证书检测  SELECT * FROM `flawInfo` where flawName="明文证书检测"
被测系统客户端安装包中发现明文的证书文件，攻击者容易非授权访问证书文件，对使用证书加密/认证的数据进行解密，容易造成敏感信息泄露。


--证书文件检测
被测系统客户端安装包中发现明文的证书文件，攻击者容易非授权访问证书文件，对使用证书加密/认证的数据进行解密，容易造成敏感信息泄露。




--友盟SDK越权漏洞
https://www.freebuf.com/articles/system/156332.html
通过分析发现，有漏洞的组件UmengIntentService是在新版3.1.X版本中引入的。我们据此确定以下的特征值，并在360显危镜后台数据库中查询受该漏洞影响的APP：组件service中包含UmengIntentService并且在apk中包含字符串pullapp。


>>>>>>> develop_2
